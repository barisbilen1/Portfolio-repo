/*********************************************
 * OPL 12.10.0.0 Model
 * Author: baris.bilen
 * Creation Date: Mar 21, 2021 at 1:39:54 PM
 *********************************************/


// THIS CODE WRITTEN IN OPL AND THE MODEL IS SOLVED VIA CPLEX SOLVER.


 
 //Setting Parameters

int Solar_Farm_Area = ...;
float Solar_Efficiency = ...;
float Size_of_the_generator = ...;
float Hydropower_Efficiency = ...;
float Height_Difference = ...;
float Unit_cost_of_reservoir = ...;
float Discount_factor_for_hydropower = ...;
int density_of_water = ...;
float gravitational_constant = ...;
int Big_M = ...;

range time = 1..56;
range time2 = 0..56;

float electricity_price[time] = ...;
float solar_radiation[time] = ...;
float demand_3hour[time] = ...;

//Setting Decision Variables

dvar float size_of_reservoir_upper;
dvar float size_of_reservoir_lower;
dvar float water_level_upper[time2];
dvar float water_level_lower[time2];
dvar float water_release_upper[time];
dvar float water_release_lower[time];
dvar float Grid_usage[time];
dvar float water_spill_upper[time];
dvar float water_spill_lower[time];
dvar float pumped_water[time];
dvar float energy_generated_upper[time];
dvar float energy_generated_lower[time];
dvar float solar_directly_demand[time];
dvar float solar_sent_hydropower[time];
dvar float solar_curtailed[time];
dvar boolean binary_var[time];



//Objective function

dexpr float Total_Reservoir_Cost =
(Discount_factor_for_hydropower)*(Unit_cost_of_reservoir)*(size_of_reservoir_upper+size_of_reservoir_lower);

dexpr float Total_Grid_Cost = (sum(i in time) Grid_usage[i]*electricity_price[i]);

minimize Total_Reservoir_Cost + Total_Grid_Cost;



//Constraints

subject to{
  
  forall (i in time)
    Constraint1:
      water_level_upper[i] <= size_of_reservoir_upper;
      
  forall (i in time)
    Constraint2:
      water_level_lower[i] <= size_of_reservoir_lower;
  
  water_level_upper[0] == (size_of_reservoir_upper)/2;
  
  water_level_lower[0] == (size_of_reservoir_lower)/2;
      
  forall (i in time)
    Constraint3:
      water_level_upper[i] == water_level_upper[i-1] + pumped_water[i] - water_release_upper[i] - water_spill_upper[i];
  
  forall (i in time)
    Constraint4:
      water_level_lower[i] == water_level_lower[i-1] + water_release_upper[i] - pumped_water[i] - water_spill_lower[i] - water_release_lower[i];
      
  forall (i in time)
    Constraint5:
      energy_generated_upper[i] == (1/(3600*1000000000))*(water_release_upper[i] * Height_Difference * Hydropower_Efficiency * density_of_water * gravitational_constant);
  
  forall (i in time)
    Constraint6:
      energy_generated_lower[i] == (1/(3600*1000000000))*(water_release_lower[i] * Height_Difference * Hydropower_Efficiency * density_of_water * gravitational_constant);
      
  forall (i in time)
    Constraint7:
      Solar_Farm_Area * solar_radiation[i] * Solar_Efficiency == solar_directly_demand[i] + solar_sent_hydropower[i] + solar_curtailed[i];
   
  forall (i in time)
    Constraint8:
      solar_sent_hydropower[i] == (1/(3600*1000000000))*(pumped_water[i] * density_of_water * Height_Difference * gravitational_constant) / Hydropower_Efficiency ;
   
  forall (i in time)
    Constraint9:
      energy_generated_upper[i] <= Size_of_the_generator * 3 ;
   
  forall (i in time)
    Constraint10:
      energy_generated_lower[i] <= Size_of_the_generator * 3 ;
     
  forall (i in time)
    Constraint11:
      solar_sent_hydropower[i] <= Size_of_the_generator * 3 ;
      
  forall (i in time)
    Constraint12:
      demand_3hour[i] <= energy_generated_upper[i] + energy_generated_lower[i] + solar_directly_demand[i] + Grid_usage[i] ;
  
  forall (i in time)
    Constraint13:
      pumped_water[i] <= binary_var[i] * Big_M ;
      
  forall (i in time)
      Constraint14:
        water_release_upper[i] <= (1 - binary_var[i]) * Big_M ;
        
  //size_of_reservoir_upper == size_of_reservoir_lower ;
  
  size_of_reservoir_upper >= 0;
  
  size_of_reservoir_lower >= 0;
  
  size_of_reservoir_upper <= 10000000;
  
  size_of_reservoir_lower <= 10000000;
  
  forall (i in time)
    water_level_upper[i] >= 0;
    
  forall (i in time)
    water_level_lower[i] >=0;
    
  forall (i in time)
    water_release_upper[i] >= 0;
    
  forall (i in time)
    water_release_lower[i] >= 0;
    
  forall (i in time)
    Grid_usage[i] >= 0;
   
  forall (i in time)
    water_spill_upper[i] >= 0;
    
  forall (i in time)
    water_spill_lower[i] >= 0;
    
  forall (i in time)
    pumped_water[i] >= 0;
    
  forall (i in time)
    energy_generated_upper[i] >= 0;
    
  forall (i in time)
    energy_generated_lower[i] >= 0;
    
  forall (i in time)
    solar_directly_demand[i] >= 0;
    
  forall (i in time)
    solar_sent_hydropower[i] >= 0;
    
  forall (i in time)
    solar_curtailed[i] >= 0;
                
} 



// FIND THE ASSOCIATED DATA BELOW


 //Scalar parameters

Solar_Farm_Area = 20;
Solar_Efficiency = 0.25;
Size_of_the_generator = 1.2;
Hydropower_Efficiency = 0.95;
Height_Difference = 80;
Unit_cost_of_reservoir = 2.5;
Discount_factor_for_hydropower = 0.002093;
density_of_water =  1000; 
gravitational_constant = 9.81;
Big_M = 999999999999;


//Time series data

SheetConnection my_sheet("HW2data.xlsx");

electricity_price from SheetRead(my_sheet,"datas!E3:E58");
solar_radiation from SheetRead(my_sheet,"datas!C3:C58");
demand_3hour from SheetRead(my_sheet,"datas!B3:B58");





